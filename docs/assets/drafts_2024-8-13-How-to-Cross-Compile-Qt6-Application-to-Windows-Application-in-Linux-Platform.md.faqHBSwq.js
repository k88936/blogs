import{_ as s,c as a,o as e,af as n}from"./chunks/framework.CgieQmbq.js";const c=JSON.parse('{"title":"How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform","description":"","frontmatter":{"layout":"post","tags":"qt,wsl2,mingw"},"headers":[],"relativePath":"drafts/2024-8-13-How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform.md","filePath":"drafts/2024-8-13-How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform.md"}'),t={name:"drafts/2024-8-13-How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform.md"};function l(h,i,p,o,r,k){return e(),a("div",null,[...i[0]||(i[0]=[n(`<h1 id="how-to-cross-compile-qt6-application-to-windows-application-in-linux-platform" tabindex="-1">How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform <a class="header-anchor" href="#how-to-cross-compile-qt6-application-to-windows-application-in-linux-platform" aria-label="Permalink to “How-to-Cross-Compile-Qt6-Application-to-Windows-Application-in-Linux-Platform”">​</a></h1><h2 id="why" tabindex="-1">why <a class="header-anchor" href="#why" aria-label="Permalink to “why”">​</a></h2><p>Im working on wsl2, having got used to Jetbrains Tools, so I use clion to develop qt program instead of qtcreator the program I am working on is targeted at not-tech-people , so I need release it on windows</p><h2 id="how-to-do-it" tabindex="-1">how-to-do-it <a class="header-anchor" href="#how-to-do-it" aria-label="Permalink to “how-to-do-it”">​</a></h2><p>env:archlinux on wsl2 ,clion</p><h3 id="basic-install" tabindex="-1">basic install <a class="header-anchor" href="#basic-install" aria-label="Permalink to “basic install”">​</a></h3><ol><li>mingw-w64-cmake</li><li>mingw-w64-g++</li><li>qt6-base (which is avaliable on archlinux,or you can use online installer)</li><li>get qt6 mingw package(which I used online installer for windows,and got it in &quot;C:\\Qt\\6.7.2\\mingw_64&quot;,and copy it to ~/qt)</li></ol><h3 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-label="Permalink to “config”">​</a></h3><ol><li>create a qt6 project</li><li>config toolchain of clion using mingw-w64-cmake,mingw-w64-g++</li></ol><h3 id="fix-problem-one-qt6-package-not-found" tabindex="-1">fix problem one :qt6 package not found <a class="header-anchor" href="#fix-problem-one-qt6-package-not-found" aria-label="Permalink to “fix problem one :qt6 package  not found”">​</a></h3><p>add cmake param</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_TOOLCHAIN_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">~/qt/lib/cmake/Qt6/qt.toolchain.cmake</span></span></code></pre></div><h3 id="fix-problem-two-conflict-between-host-headers-and-mingw-headers" tabindex="-1">fix problem two: conflict between host-headers and mingw-headers <a class="header-anchor" href="#fix-problem-two-conflict-between-host-headers-and-mingw-headers" aria-label="Permalink to “fix problem two: conflict between host-headers and mingw-headers”">​</a></h3><p>add cmake param</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-DCMAKE_SHARED_LINKER_FLAGS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Wl,-undefined&quot;</span></span></code></pre></div><p>add in CMakeLists.txt</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>set(CMAKE_FIND_USE_CMAKE_SYSTEM_PATH FALSE)</span></span>
<span class="line"><span>set(CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH FALSE)</span></span>
<span class="line"><span>set(CMAKE_SYSROOT &quot;/usr/x86_64-w64-mingw32/&quot;)</span></span></code></pre></div><p><a href="https://stackoverflow.com/questions/68105648" target="_blank" rel="noreferrer">refer</a> if that fails try to swap the position of the two params</p><h3 id="fix-problem-three-missing-dlls" tabindex="-1">fix problem three: missing dlls <a class="header-anchor" href="#fix-problem-three-missing-dlls" aria-label="Permalink to “fix problem three: missing dlls”">​</a></h3><p>using package tool in ~/qt/bin/windeployqt6.exe ,because I am using wsl2, I can run it directly,as this</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windeployqt6.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PROJECT/WIN_BUILD/XXX.exe</span></span></code></pre></div><p>if it still remind you the missing dll ,find them in /usr/x86_64-w64-mingw32/bin/,copy them to the same dir as XXX.exe</p><h3 id="fix-problem-four-the-black-console-appears-when-the-app-run-in-windows" tabindex="-1">fix problem four: the black console appears when the app run in windows <a class="header-anchor" href="#fix-problem-four-the-black-console-appears-when-the-app-run-in-windows" aria-label="Permalink to “fix problem four: the black console appears when the app run in windows”">​</a></h3><p>edit CMakeLists.txt, pay attention to postion of WIN32</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>add_executable(PROJECT WIN32</span></span>
<span class="line"><span>        main.cpp )</span></span></code></pre></div><p><a href="https://www.codenong.com/18553125/" target="_blank" rel="noreferrer">refer</a></p><h2 id="compose-them-all-in-makefiles" tabindex="-1">Compose them all in Makefiles <a class="header-anchor" href="#compose-them-all-in-makefiles" aria-label="Permalink to “Compose them all in Makefiles”">​</a></h2><div class="language-make"><button title="Copy Code" class="copy"></button><span class="lang">make</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.PHONY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:mingw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectName=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> basename $(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CURDIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectPath=D:\\\\linux</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subst</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /,\\\\,$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pwd))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mingw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x86_64-w64-mingw32-cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_MAKE_PROGRAM=x86_64-w64-mingw32-make -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++ -DCMAKE_TOOLCHAIN_FILE=/mnt/c/Qt/6.7.2/mingw_64/lib/cmake/Qt6/qt.toolchain.cmake -DCMAKE_SHARED_LINKER_FLAGS=-Wl,-undefined -DCMAKE_FIND_USE_CMAKE_SYSTEM_PATH=FALSE -DMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH=FALSE -DCMAKE_SYSROOT=/usr/x86_64-w64-mingw32/ -G &quot;Unix Makefiles&quot; -S . -B ./cmake-build-mingw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cmake --build ./cmake-build-mingw --target all</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cp /usr/x86_64-w64-mingw32/bin/libgcc_s_seh-1.dll ./cmake-build-mingw/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cp /usr/x86_64-w64-mingw32/bin/libstdc++-6.dll   ./cmake-build-mingw/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cp /usr/x86_64-w64-mingw32/bin/libwinpthread-1.dll   ./cmake-build-mingw/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /mnt/c/Qt/6.7.2/mingw_64/bin/windeployqt.exe ./cmake-build-mingw/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.exe</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testOnWindows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: mingw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cd </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pwd)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/cmake-build-mingw/ &amp;&amp; ./</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.exe</span></span></code></pre></div>`,28)])])}const g=s(t,[["render",l]]);export{c as __pageData,g as default};
